;; Analyzed by ClojureScript 0.0-3126
{:use-macros nil, :excludes #{delay}, :name slug-fest.core, :imports nil, :requires {dat dat, stats stats, detector detector, window-resize window-resize, fullscreen fullscreen, three three}, :uses nil, :defs {game-over {:protocol-inline nil, :meta {:arglists (quote ([current-time previous-time])), :doc "Game is over", :end-column 16, :end-line 655, :column 7, :line 655, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :name slug-fest.core/game-over, :variadic false, :file "src/slug_fest/core.cljs", :end-column 16, :method-params ([current-time previous-time]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 655, :end-line 655, :max-fixed-arity 2, :fn-var true, :arglists (quote ([current-time previous-time])), :doc "Game is over", :test true}, Shroom {:num-fields 7, :protocols #{slug-fest.core/Object}, :name slug-fest.core/Shroom, :file "src/slug_fest/core.cljs", :end-column 16, :type true, :column 10, :line 266, :record false, :end-line 266, :skip-protocol-flag nil}, key-state {:meta {:end-column 15, :end-line 456, :column 6, :line 456, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :file "src/slug_fest/core.cljs", :line 456, :column 1, :end-line 456, :end-column 15, :test true, :name slug-fest.core/key-state}, ->Slug {:protocol-inline nil, :meta {:arglists (quote ([texture geometry material mesh salt-time max-salt-time dead?])), :factory :positional, :skip-protocol-flag nil, :protocols #{slug-fest.core/Object}, :end-column 14, :end-line 333, :column 10, :line 333, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :protocols #{slug-fest.core/Object}, :name slug-fest.core/->Slug, :variadic false, :file "src/slug_fest/core.cljs", :end-column 14, :method-params ([texture geometry material mesh salt-time max-salt-time dead?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :methods ({:tag slug-fest.core/Slug, :variadic false, :max-fixed-arity 7}), :line 333, :end-line 333, :max-fixed-arity 7, :fn-var true, :arglists (quote ([texture geometry material mesh salt-time max-salt-time dead?])), :skip-protocol-flag nil, :test true}, space-key {:meta {:end-column 15, :end-line 470, :column 6, :line 470, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :file "src/slug_fest/core.cljs", :line 470, :column 1, :end-line 470, :end-column 15, :test true, :name slug-fest.core/space-key}, floor {:meta {:end-column 11, :end-line 771, :column 6, :line 771, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :file "src/slug_fest/core.cljs", :line 771, :column 1, :end-line 771, :end-column 11, :test true, :name slug-fest.core/floor}, skybox-geometry {:meta {:end-column 21, :end-line 600, :column 6, :line 600, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :file "src/slug_fest/core.cljs", :line 600, :column 1, :end-line 600, :end-column 21, :test true, :name slug-fest.core/skybox-geometry}, create-slug-pool {:protocol-inline nil, :meta {:arglists (quote ([])), :doc "Create a slug pool", :end-column 23, :end-line 441, :column 7, :line 441, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :name slug-fest.core/create-slug-pool, :variadic false, :file "src/slug_fest/core.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 441, :end-line 441, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Create a slug pool", :test true}, up-arrow {:meta {:end-column 14, :end-line 461, :column 6, :line 461, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :file "src/slug_fest/core.cljs", :line 461, :column 1, :end-line 461, :end-column 14, :test true, :name slug-fest.core/up-arrow}, delay {:meta {:end-column 11, :end-line 653, :column 6, :line 653, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :file "src/slug_fest/core.cljs", :line 653, :column 1, :end-line 653, :end-column 11, :test true, :name slug-fest.core/delay}, stats {:meta {:end-column 11, :end-line 535, :column 6, :line 535, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :file "src/slug_fest/core.cljs", :line 535, :column 1, :end-line 535, :end-column 11, :test true, :name slug-fest.core/stats}, y-max {:protocol-inline nil, :meta {:arglists (quote ([object ground])), :doc "Return the y-max that will keep on object on ground given the geometries of object and ground", :end-column 12, :end-line 27, :column 7, :line 27, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :name slug-fest.core/y-max, :variadic false, :file "src/slug_fest/core.cljs", :end-column 12, :method-params ([object ground]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag number, :variadic false, :max-fixed-arity 2}), :line 27, :end-line 27, :max-fixed-arity 2, :fn-var true, :arglists (quote ([object ground])), :doc "Return the y-max that will keep on object on ground given the geometries of object and ground", :test true}, x-min {:protocol-inline nil, :meta {:arglists (quote ([object ground])), :doc "Return the x-min that will keep on object on ground given the object and ground", :end-column 12, :end-line 21, :column 7, :line 21, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :name slug-fest.core/x-min, :variadic false, :file "src/slug_fest/core.cljs", :end-column 12, :method-params ([object ground]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag number, :variadic false, :max-fixed-arity 2}), :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([object ground])), :doc "Return the x-min that will keep on object on ground given the object and ground", :test true}, create-mesh-lambert-material {:protocol-inline nil, :meta {:arglists (quote ([color])), :doc "Create a non-shiny (Lambertian) surface of hexadecimal color. Returns a THREE.Mesh object.\nsee: http://threejs.org/docs/#Reference/Materials/MeshLambertMaterial", :end-column 35, :end-line 623, :column 7, :line 623, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :name slug-fest.core/create-mesh-lambert-material, :variadic false, :file "src/slug_fest/core.cljs", :end-column 35, :method-params ([color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag js/THREE.MeshLambertMaterial, :variadic false, :max-fixed-arity 1}), :line 623, :end-line 623, :max-fixed-arity 1, :fn-var true, :arglists (quote ([color])), :doc "Create a non-shiny (Lambertian) surface of hexadecimal color. Returns a THREE.Mesh object.\nsee: http://threejs.org/docs/#Reference/Materials/MeshLambertMaterial", :test true}, y-min {:protocol-inline nil, :meta {:arglists (quote ([object ground])), :doc "Return the y-min that will keep on object on ground given the object and ground", :end-column 12, :end-line 33, :column 7, :line 33, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :name slug-fest.core/y-min, :variadic false, :file "src/slug_fest/core.cljs", :end-column 12, :method-params ([object ground]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag number, :variadic false, :max-fixed-arity 2}), :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([object ground])), :doc "Return the y-min that will keep on object on ground given the object and ground", :test true}, initial-loop {:protocol-inline nil, :meta {:arglists (quote ([current-time previous-time])), :doc "Initial loop that waits for user input in order to begin the game. This loop should be callled\nwith request-animation-frame-wrapper so that current-time and previous-time will be given proper values. current-time is provided by requstAnimationFrame", :end-column 19, :end-line 685, :column 7, :line 685, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :name slug-fest.core/initial-loop, :variadic false, :file "src/slug_fest/core.cljs", :end-column 19, :method-params ([current-time previous-time]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 685, :end-line 685, :max-fixed-arity 2, :fn-var true, :arglists (quote ([current-time previous-time])), :doc "Initial loop that waits for user input in order to begin the game. This loop should be callled\nwith request-animation-frame-wrapper so that current-time and previous-time will be given proper values. current-time is provided by requstAnimationFrame", :test true}, game-key-up! {:protocol-inline nil, :meta {:arglists (quote ([event])), :doc "Handle event related to when a user releases a key. This modifies key-state", :end-column 19, :end-line 478, :column 7, :line 478, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :name slug-fest.core/game-key-up!, :variadic false, :file "src/slug_fest/core.cljs", :end-column 19, :method-params ([event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 478, :end-line 478, :max-fixed-arity 1, :fn-var true, :arglists (quote ([event])), :doc "Handle event related to when a user releases a key. This modifies key-state", :test true}, s-key {:meta {:end-column 11, :end-line 468, :column 6, :line 468, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :file "src/slug_fest/core.cljs", :line 468, :column 1, :end-line 468, :end-column 11, :test true, :name slug-fest.core/s-key}, create-shroom-pool {:protocol-inline nil, :meta {:arglists (quote ([])), :doc "Create a shroom pool", :end-column 25, :end-line 323, :column 7, :line 323, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :name slug-fest.core/create-shroom-pool, :variadic false, :file "src/slug_fest/core.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 323, :end-line 323, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Create a shroom pool", :test true}, create-tiled-texture {:protocol-inline nil, :meta {:arglists (quote ([image-str U V])), :doc "Create a THREE.Texture using image tiled U by V times.\nsee: http://threejs.org/docs/#Reference/Extras/ImageUtils\n     http://threejs.org/docs/#Reference/Textures/Texture", :end-column 27, :end-line 570, :column 7, :line 570, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :name slug-fest.core/create-tiled-texture, :variadic false, :file "src/slug_fest/core.cljs", :end-column 27, :method-params ([image-str U V]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag js/THREE.ImageUtils.loadTexture, :variadic false, :max-fixed-arity 3}), :line 570, :end-line 570, :max-fixed-arity 3, :fn-var true, :arglists (quote ([image-str U V])), :doc "Create a THREE.Texture using image tiled U by V times.\nsee: http://threejs.org/docs/#Reference/Extras/ImageUtils\n     http://threejs.org/docs/#Reference/Textures/Texture", :test true}, scene {:meta {:end-column 11, :end-line 485, :column 6, :line 485, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :file "src/slug_fest/core.cljs", :line 485, :column 1, :end-line 485, :end-column 11, :test true, :name slug-fest.core/scene}, ->Hero {:protocol-inline nil, :meta {:arglists (quote ([texture horizontal-frames vertical-frames material geometry mesh current-frame current-frame-total-display-time frame-duration direction move-increment salting? current-salt-frame salt-frame-display-time salt-frame-duration shaker-mesh shaker-box])), :factory :positional, :skip-protocol-flag nil, :protocols #{slug-fest.core/Object}, :end-column 14, :end-line 102, :column 10, :line 102, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :protocols #{slug-fest.core/Object}, :name slug-fest.core/->Hero, :variadic false, :file "src/slug_fest/core.cljs", :end-column 14, :method-params ([texture horizontal-frames vertical-frames material geometry mesh current-frame current-frame-total-display-time frame-duration direction move-increment salting? current-salt-frame salt-frame-display-time salt-frame-duration shaker-mesh shaker-box]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :methods ({:tag slug-fest.core/Hero, :variadic false, :max-fixed-arity 17}), :line 102, :end-line 102, :max-fixed-arity 17, :fn-var true, :arglists (quote ([texture horizontal-frames vertical-frames material geometry mesh current-frame current-frame-total-display-time frame-duration direction move-increment salting? current-salt-frame salt-frame-display-time salt-frame-duration shaker-mesh shaker-box])), :skip-protocol-flag nil, :test true}, right-arrow {:meta {:end-column 17, :end-line 462, :column 6, :line 462, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :file "src/slug_fest/core.cljs", :line 462, :column 1, :end-line 462, :end-column 17, :test true, :name slug-fest.core/right-arrow}, sphere {:meta {:end-column 12, :end-line 636, :column 6, :line 636, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :file "src/slug_fest/core.cljs", :line 636, :column 1, :end-line 636, :end-column 12, :test true, :name slug-fest.core/sphere}, hero {:meta {:end-column 10, :end-line 232, :column 6, :line 232, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :file "src/slug_fest/core.cljs", :line 232, :column 1, :end-line 232, :end-column 10, :test true, :name slug-fest.core/hero}, slug {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 11, :end-line 390, :column 7, :line 390, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :name slug-fest.core/slug, :variadic false, :file "src/slug_fest/core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag slug-fest.core/Slug, :variadic false, :max-fixed-arity 0}), :line 390, :end-line 390, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, reset-shroom-pool! {:protocol-inline nil, :meta {:arglists (quote ([shroom-pool])), :doc "Reset the shroom pool", :end-column 25, :end-line 293, :column 7, :line 293, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :name slug-fest.core/reset-shroom-pool!, :variadic false, :file "src/slug_fest/core.cljs", :end-column 25, :method-params ([shroom-pool]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 293, :end-line 293, :max-fixed-arity 1, :fn-var true, :arglists (quote ([shroom-pool])), :doc "Reset the shroom pool", :test true}, Slug {:num-fields 7, :protocols #{slug-fest.core/Object}, :name slug-fest.core/Slug, :file "src/slug_fest/core.cljs", :end-column 14, :type true, :column 10, :line 333, :record false, :end-line 333, :skip-protocol-flag nil}, create-sphere-mesh {:protocol-inline nil, :meta {:arglists (quote ([sphere-geometry material x y z])), :doc "Create a sphere mesh object using sphere-geometry with material with initial x,y, and z coordinates. Returns a THREE.Mesh. object", :end-column 25, :end-line 629, :column 7, :line 629, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :name slug-fest.core/create-sphere-mesh, :variadic false, :file "src/slug_fest/core.cljs", :end-column 25, :method-params ([sphere-geometry material x y z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag js/THREE.Mesh, :variadic false, :max-fixed-arity 5}), :line 629, :end-line 629, :max-fixed-arity 5, :fn-var true, :arglists (quote ([sphere-geometry material x y z])), :doc "Create a sphere mesh object using sphere-geometry with material with initial x,y, and z coordinates. Returns a THREE.Mesh. object", :test true}, request-id {:meta {:end-column 16, :end-line 11, :column 6, :line 11, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :file "src/slug_fest/core.cljs", :line 11, :column 1, :end-line 11, :end-column 16, :test true, :name slug-fest.core/request-id}, a-key {:meta {:end-column 11, :end-line 465, :column 6, :line 465, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :file "src/slug_fest/core.cljs", :line 465, :column 1, :end-line 465, :end-column 11, :test true, :name slug-fest.core/a-key}, request-animation-frame-wrapper {:protocol-inline nil, :meta {:arglists (quote ([callback previous-time])), :doc "Call the function callback with previous-time", :end-column 38, :end-line 647, :column 7, :line 647, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :name slug-fest.core/request-animation-frame-wrapper, :variadic false, :file "src/slug_fest/core.cljs", :end-column 38, :method-params ([callback previous-time]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 647, :end-line 647, :max-fixed-arity 2, :fn-var true, :arglists (quote ([callback previous-time])), :doc "Call the function callback with previous-time", :test true}, ->Shroom {:protocol-inline nil, :meta {:arglists (quote ([texture geometry material mesh bite-time max-bite-time dead?])), :factory :positional, :skip-protocol-flag nil, :protocols #{slug-fest.core/Object}, :end-column 16, :end-line 266, :column 10, :line 266, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :protocols #{slug-fest.core/Object}, :name slug-fest.core/->Shroom, :variadic false, :file "src/slug_fest/core.cljs", :end-column 16, :method-params ([texture geometry material mesh bite-time max-bite-time dead?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :methods ({:tag slug-fest.core/Shroom, :variadic false, :max-fixed-arity 7}), :line 266, :end-line 266, :max-fixed-arity 7, :fn-var true, :arglists (quote ([texture geometry material mesh bite-time max-bite-time dead?])), :skip-protocol-flag nil, :test true}, sphere-geometry {:meta {:end-column 21, :end-line 611, :column 6, :line 611, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :file "src/slug_fest/core.cljs", :line 611, :column 1, :end-line 611, :end-column 21, :test true, :name slug-fest.core/sphere-geometry}, ground {:meta {:end-column 12, :end-line 92, :column 6, :line 92, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :file "src/slug_fest/core.cljs", :line 92, :column 1, :end-line 92, :end-column 12, :test true, :name slug-fest.core/ground}, init {:protocol-inline nil, :meta {:arglists (quote ([])), :export true, :end-column 20, :end-line 779, :column 16, :line 779, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :name slug-fest.core/init, :variadic false, :file "src/slug_fest/core.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 779, :end-line 779, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, you-win-text {:meta {:end-column 18, :end-line 80, :column 6, :line 80, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :file "src/slug_fest/core.cljs", :line 80, :column 1, :end-line 80, :end-column 18, :test true, :name slug-fest.core/you-win-text}, find-nearest-object {:protocol-inline nil, :meta {:arglists (quote ([target object-pool nearest-object])), :doc "Find the closest object to target in object-pool", :end-column 26, :end-line 51, :column 7, :line 51, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :name slug-fest.core/find-nearest-object, :variadic false, :file "src/slug_fest/core.cljs", :end-column 26, :method-params ([target object-pool nearest-object]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :line 51, :end-line 51, :max-fixed-arity 3, :fn-var true, :arglists (quote ([target object-pool nearest-object])), :doc "Find the closest object to target in object-pool", :test true}, controls {:meta {:end-column 14, :end-line 533, :column 6, :line 533, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :file "src/slug_fest/core.cljs", :line 533, :column 1, :end-line 533, :end-column 14, :test true, :name slug-fest.core/controls}, floor-geometry {:meta {:end-column 20, :end-line 584, :column 6, :line 584, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :file "src/slug_fest/core.cljs", :line 584, :column 1, :end-line 584, :end-column 20, :test true, :name slug-fest.core/floor-geometry}, ->Text {:protocol-inline nil, :meta {:arglists (quote ([texture geometry material mesh])), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 14, :end-line 68, :column 10, :line 68, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :protocols #{}, :name slug-fest.core/->Text, :variadic false, :file "src/slug_fest/core.cljs", :end-column 14, :method-params ([texture geometry material mesh]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :methods ({:tag slug-fest.core/Text, :variadic false, :max-fixed-arity 4}), :line 68, :end-line 68, :max-fixed-arity 4, :fn-var true, :arglists (quote ([texture geometry material mesh])), :skip-protocol-flag nil, :test true}, create-mesh-basic-material {:protocol-inline nil, :meta {:arglists (quote ([parameters])), :doc "Create a THREE.MeshBasicMaterial object using the js-obj parameters.\nExample usage: (create-mesh-basic-material (js-obj \"color\" 0x9999ff \"side\" js/THREE.BackSide))\nsee: http://threejs.org/docs/#Reference/Materials/MeshBasicMaterial", :end-column 33, :end-line 604, :column 7, :line 604, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :name slug-fest.core/create-mesh-basic-material, :variadic false, :file "src/slug_fest/core.cljs", :end-column 33, :method-params ([parameters]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag js/THREE.MeshBasicMaterial, :variadic false, :max-fixed-arity 1}), :line 604, :end-line 604, :max-fixed-arity 1, :fn-var true, :arglists (quote ([parameters])), :doc "Create a THREE.MeshBasicMaterial object using the js-obj parameters.\nExample usage: (create-mesh-basic-material (js-obj \"color\" 0x9999ff \"side\" js/THREE.BackSide))\nsee: http://threejs.org/docs/#Reference/Materials/MeshBasicMaterial", :test true}, Hero {:num-fields 17, :protocols #{slug-fest.core/Object}, :name slug-fest.core/Hero, :file "src/slug_fest/core.cljs", :end-column 14, :type true, :column 10, :line 102, :record false, :end-line 102, :skip-protocol-flag nil}, game-key-down! {:protocol-inline nil, :meta {:arglists (quote ([event])), :doc "Handle event related to when a user presses down on a key. This modifies key-state", :end-column 21, :end-line 472, :column 7, :line 472, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :name slug-fest.core/game-key-down!, :variadic false, :file "src/slug_fest/core.cljs", :end-column 21, :method-params ([event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 472, :end-line 472, :max-fixed-arity 1, :fn-var true, :arglists (quote ([event])), :doc "Handle event related to when a user presses down on a key. This modifies key-state", :test true}, update-controls {:protocol-inline nil, :meta {:end-column 21, :end-line 641, :column 6, :line 641, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :name slug-fest.core/update-controls, :variadic false, :file "src/slug_fest/core.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 641, :end-line 641, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}, create-scene {:protocol-inline nil, :meta {:arglists (quote ([])), :doc "Create a THREE.Scene object.\nsee:http://threejs.org/docs/#Reference/Scenes/Scene", :end-column 19, :end-line 487, :column 7, :line 487, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :name slug-fest.core/create-scene, :variadic false, :file "src/slug_fest/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag js/THREE.Scene, :variadic false, :max-fixed-arity 0}), :line 487, :end-line 487, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Create a THREE.Scene object.\nsee:http://threejs.org/docs/#Reference/Scenes/Scene", :test true}, renderer {:meta {:end-column 14, :end-line 519, :column 6, :line 519, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :file "src/slug_fest/core.cljs", :line 519, :column 1, :end-line 519, :end-column 14, :test true, :name slug-fest.core/renderer}, sphere-material {:meta {:end-column 21, :end-line 621, :column 6, :line 621, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :file "src/slug_fest/core.cljs", :line 621, :column 1, :end-line 621, :end-column 21, :test true, :name slug-fest.core/sphere-material}, w-key {:meta {:end-column 11, :end-line 466, :column 6, :line 466, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :file "src/slug_fest/core.cljs", :line 466, :column 1, :end-line 466, :end-column 11, :test true, :name slug-fest.core/w-key}, mesh-box {:protocol-inline nil, :meta {:arglists (quote ([object])), :doc "Return a box that is the same size of an objects's mesh and centered on that object", :end-column 15, :end-line 40, :column 7, :line 40, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :name slug-fest.core/mesh-box, :variadic false, :file "src/slug_fest/core.cljs", :end-column 15, :method-params ([object]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag js/THREE.Box2, :variadic false, :max-fixed-arity 1}), :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([object])), :doc "Return a box that is the same size of an objects's mesh and centered on that object", :test true}, x-max {:protocol-inline nil, :meta {:arglists (quote ([object ground])), :doc "Return the x-max that will keep on object on ground given the object and ground", :end-column 12, :end-line 15, :column 7, :line 15, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :name slug-fest.core/x-max, :variadic false, :file "src/slug_fest/core.cljs", :end-column 12, :method-params ([object ground]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag number, :variadic false, :max-fixed-arity 2}), :line 15, :end-line 15, :max-fixed-arity 2, :fn-var true, :arglists (quote ([object ground])), :doc "Return the x-max that will keep on object on ground given the object and ground", :test true}, create-sphere-geometry {:protocol-inline nil, :meta {:arglists (quote ([radius width-segments height-segments])), :doc "Create sphere geometry of radius, number of width-segments and number of height-segments.\nReturns a THREE.SphereGeometry object.\nsee: http://threejs.org/docs/#Reference/Extras.Geometries/SphereGeometry", :end-column 29, :end-line 613, :column 7, :line 613, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :name slug-fest.core/create-sphere-geometry, :variadic false, :file "src/slug_fest/core.cljs", :end-column 29, :method-params ([radius width-segments height-segments]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag js/THREE.SphereGeometry, :variadic false, :max-fixed-arity 3}), :line 613, :end-line 613, :max-fixed-arity 3, :fn-var true, :arglists (quote ([radius width-segments height-segments])), :doc "Create sphere geometry of radius, number of width-segments and number of height-segments.\nReturns a THREE.SphereGeometry object.\nsee: http://threejs.org/docs/#Reference/Extras.Geometries/SphereGeometry", :test true}, create-webgl-renderer {:protocol-inline nil, :meta {:arglists (quote ([parameters])), :doc "Create a THREE.WebGLRenderer with js-obj parameters.\nExample usage: (create-webgl-renderer (js-obj \"antialias\" true))\nsee: http://threejs.org/docs/#Reference/Renderers/WebGLRenderer", :end-column 28, :end-line 512, :column 7, :line 512, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :name slug-fest.core/create-webgl-renderer, :variadic false, :file "src/slug_fest/core.cljs", :end-column 28, :method-params ([parameters]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag js/THREE.WebGLRenderer, :variadic false, :max-fixed-arity 1}), :line 512, :end-line 512, :max-fixed-arity 1, :fn-var true, :arglists (quote ([parameters])), :doc "Create a THREE.WebGLRenderer with js-obj parameters.\nExample usage: (create-webgl-renderer (js-obj \"antialias\" true))\nsee: http://threejs.org/docs/#Reference/Renderers/WebGLRenderer", :test true}, create-light {:protocol-inline nil, :meta {:arglists (quote ([color x y z])), :doc "Create a light with hexadecimal color at coordinates x,y, and z", :end-column 19, :end-line 557, :column 7, :line 557, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :name slug-fest.core/create-light, :variadic false, :file "src/slug_fest/core.cljs", :end-column 19, :method-params ([color x y z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag js/THREE.PointLight, :variadic false, :max-fixed-arity 4}), :line 557, :end-line 557, :max-fixed-arity 4, :fn-var true, :arglists (quote ([color x y z])), :doc "Create a light with hexadecimal color at coordinates x,y, and z", :test true}, reset-slug-pool! {:protocol-inline nil, :meta {:arglists (quote ([slug-pool])), :doc "Reset the slug pool", :end-column 23, :end-line 412, :column 7, :line 412, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :name slug-fest.core/reset-slug-pool!, :variadic false, :file "src/slug_fest/core.cljs", :end-column 23, :method-params ([slug-pool]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 412, :end-line 412, :max-fixed-arity 1, :fn-var true, :arglists (quote ([slug-pool])), :doc "Reset the slug pool", :test true}, render {:protocol-inline nil, :meta {:end-column 12, :end-line 645, :column 6, :line 645, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :name slug-fest.core/render, :variadic false, :file "src/slug_fest/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 645, :end-line 645, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}, floor-material {:meta {:end-column 20, :end-line 582, :column 6, :line 582, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :file "src/slug_fest/core.cljs", :line 582, :column 1, :end-line 582, :end-column 20, :test true, :name slug-fest.core/floor-material}, create-plane-geometry {:protocol-inline nil, :meta {:arglists (quote ([width height width-segments height-segments])), :doc "Create a THREE.PlaneGeometry using width, height, width-segments and height-segments.\nsee:http://threejs.org/docs/#Reference/Extras.Geometries/PlaneGeometry", :end-column 28, :end-line 586, :column 7, :line 586, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :name slug-fest.core/create-plane-geometry, :variadic false, :file "src/slug_fest/core.cljs", :end-column 28, :method-params ([width height width-segments height-segments]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag js/THREE.PlaneGeometry, :variadic false, :max-fixed-arity 4}), :line 586, :end-line 586, :max-fixed-arity 4, :fn-var true, :arglists (quote ([width height width-segments height-segments])), :doc "Create a THREE.PlaneGeometry using width, height, width-segments and height-segments.\nsee:http://threejs.org/docs/#Reference/Extras.Geometries/PlaneGeometry", :test true}, Ground {:num-fields 4, :protocols #{}, :name slug-fest.core/Ground, :file "src/slug_fest/core.cljs", :end-column 16, :type true, :column 10, :line 89, :record false, :end-line 89, :skip-protocol-flag nil}, slug-pool {:meta {:end-column 15, :end-line 454, :column 6, :line 454, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :file "src/slug_fest/core.cljs", :line 454, :column 1, :end-line 454, :end-column 15, :test true, :name slug-fest.core/slug-pool}, shroom-pool {:meta {:end-column 17, :end-line 331, :column 6, :line 331, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :file "src/slug_fest/core.cljs", :line 331, :column 1, :end-line 331, :end-column 17, :test true, :name slug-fest.core/shroom-pool}, d-key {:meta {:end-column 11, :end-line 467, :column 6, :line 467, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :file "src/slug_fest/core.cljs", :line 467, :column 1, :end-line 467, :end-column 11, :test true, :name slug-fest.core/d-key}, game-over-text {:meta {:end-column 20, :end-line 71, :column 6, :line 71, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :file "src/slug_fest/core.cljs", :line 71, :column 1, :end-line 71, :end-column 20, :test true, :name slug-fest.core/game-over-text}, create-box-geometry {:protocol-inline nil, :meta {:arglists (quote ([width height depth])), :doc "Create a box geometry that of width, height and depth.\nsee: http://threejs.org/docs/#Reference/Extras.Geometries/BoxGeometry", :end-column 26, :end-line 593, :column 7, :line 593, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :name slug-fest.core/create-box-geometry, :variadic false, :file "src/slug_fest/core.cljs", :end-column 26, :method-params ([width height depth]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag js/THREE.BoxGeometry, :variadic false, :max-fixed-arity 3}), :line 593, :end-line 593, :max-fixed-arity 3, :fn-var true, :arglists (quote ([width height depth])), :doc "Create a box geometry that of width, height and depth.\nsee: http://threejs.org/docs/#Reference/Extras.Geometries/BoxGeometry", :test true}, container {:meta {:end-column 15, :end-line 528, :column 6, :line 528, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :file "src/slug_fest/core.cljs", :line 528, :column 1, :end-line 528, :end-column 15, :test true, :name slug-fest.core/container}, initial-time {:meta {:end-column 18, :end-line 13, :column 6, :line 13, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :file "src/slug_fest/core.cljs", :line 13, :column 1, :end-line 13, :end-column 18, :test true, :name slug-fest.core/initial-time}, Text {:num-fields 4, :protocols #{}, :name slug-fest.core/Text, :file "src/slug_fest/core.cljs", :end-column 14, :type true, :column 10, :line 68, :record false, :end-line 68, :skip-protocol-flag nil}, ->Ground {:protocol-inline nil, :meta {:arglists (quote ([texture geometry material mesh])), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 16, :end-line 89, :column 10, :line 89, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :protocols #{}, :name slug-fest.core/->Ground, :variadic false, :file "src/slug_fest/core.cljs", :end-column 16, :method-params ([texture geometry material mesh]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :methods ({:tag slug-fest.core/Ground, :variadic false, :max-fixed-arity 4}), :line 89, :end-line 89, :max-fixed-arity 4, :fn-var true, :arglists (quote ([texture geometry material mesh])), :skip-protocol-flag nil, :test true}, shroom {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 13, :end-line 282, :column 7, :line 282, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :name slug-fest.core/shroom, :variadic false, :file "src/slug_fest/core.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag slug-fest.core/Shroom, :variadic false, :max-fixed-arity 0}), :line 282, :end-line 282, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, create-perspective-camera {:protocol-inline nil, :meta {:arglists (quote ([fov aspect near far])), :doc "Create a THREE.PerspectiveCamera with camera frustrum fov (field of view), aspect (aspect ratio),\nnear (near plane) and far (far plane).\nsee: http://threejs.org/docs/#Reference/Cameras/PerspectiveCamera", :end-column 32, :end-line 505, :column 7, :line 505, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :name slug-fest.core/create-perspective-camera, :variadic false, :file "src/slug_fest/core.cljs", :end-column 32, :method-params ([fov aspect near far]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag js/THREE.PerspectiveCamera, :variadic false, :max-fixed-arity 4}), :line 505, :end-line 505, :max-fixed-arity 4, :fn-var true, :arglists (quote ([fov aspect near far])), :doc "Create a THREE.PerspectiveCamera with camera frustrum fov (field of view), aspect (aspect ratio),\nnear (near plane) and far (far plane).\nsee: http://threejs.org/docs/#Reference/Cameras/PerspectiveCamera", :test true}, down-arrow {:meta {:end-column 16, :end-line 463, :column 6, :line 463, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :file "src/slug_fest/core.cljs", :line 463, :column 1, :end-line 463, :end-column 16, :test true, :name slug-fest.core/down-arrow}, skybox-material {:meta {:end-column 21, :end-line 602, :column 6, :line 602, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :file "src/slug_fest/core.cljs", :line 602, :column 1, :end-line 602, :end-column 21, :test true, :name slug-fest.core/skybox-material}, floor-texture {:meta {:end-column 19, :end-line 564, :column 6, :line 564, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :file "src/slug_fest/core.cljs", :line 564, :column 1, :end-line 564, :end-column 19, :test true, :name slug-fest.core/floor-texture}, camera {:meta {:end-column 12, :end-line 493, :column 6, :line 493, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :file "src/slug_fest/core.cljs", :line 493, :column 1, :end-line 493, :end-column 12, :test true, :name slug-fest.core/camera}, left-arrow {:meta {:end-column 16, :end-line 460, :column 6, :line 460, :file "/Users/james/clojurescript/slug-fest/src/slug_fest/core.cljs"}, :file "src/slug_fest/core.cljs", :line 460, :column 1, :end-line 460, :end-column 16, :test true, :name slug-fest.core/left-arrow}}, :require-macros nil, :cljs.analyzer/constants {:order [:else], :seen #{:else}}, :doc nil}